//Fetch orders tell aeos how to fetch elements in a container.
module;
#include <cstddef>
export module aeostasis.container.fetch_order;
import <concepts>;
import aeostasis.container.narrative;
import aeostasis.utility.value_container;

namespace aeos
{
	export struct FetchOrder_base
	{
		template <readable_container T>
		using Type = void;
	};


	export template <typename T>
	concept fetch_order = std::derived_from<T, FetchOrder_base>;


	export template <typename T>
	struct FetchIdentity: FetchOrder_base
	{
		template <readable_container C>
		using Type = T;
	};

	export template <fetch_order T>
	struct FetchIdentity<T>: FetchOrder_base
	{
		template <readable_container C>
		using Type = typename T::Type;
	};

	export template <typename T, readable_container C>
	using Fetch = typename FetchIdentity<T>::template Type<C>;


	export template <typename T>
	struct FetchByKey: FetchOrder_base
	{
		template <readable_container C>
		using Type = typename C::template Get<T>;
	};


	export template <std::size_t INDEX>
	struct FetchByIndex: FetchOrder_base
	{
		template <readable_container C>
		using Type = typename C::template Get<Index<INDEX>>;
	};


	export template <typename T>
	struct FetchAsItself: FetchOrder_base
	{
		template <readable_container C>
		using Type = T;
	};


	export template <typename T, T VALUE>
	struct FetchAsValue: FetchOrder_base
	{
		template <readable_container C>
		using Type = ValueContainer<T, VALUE>;
	};


	export template <template<typename...> typename TEMPLATE
		, typename... ORDERS>
	struct FetchAsTemplate: FetchOrder_base
	{
		template <readable_container C>
		using Type = TEMPLATE<Fetch<ORDERS, C>...>;
	};
}//namespace
